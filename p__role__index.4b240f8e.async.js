(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[8],{"0fbx":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./node_modules/antd/es/tree-select/style/index.less?")},"3wW7":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./node_modules/antd/es/list/style/index.less?")},c1fT:function(module,exports,__webpack_require__){eval('// extracted by mini-css-extract-plugin\nmodule.exports = {"button":"button___Fbuyy"};\n\n//# sourceURL=webpack:///./src/pages/role/components/List.less?')},muQm:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/antd/es/button/style/index.js\nvar button_style = __webpack_require__("+L6B");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/button/index.js\nvar es_button = __webpack_require__("2/Rp");\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__("q1tI");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./src/.umi-production/core/umiExports.ts + 18 modules\nvar umiExports = __webpack_require__("9kvl");\n\n// EXTERNAL MODULE: ./node_modules/store/dist/store.legacy.js\nvar store_legacy = __webpack_require__("je13");\nvar store_legacy_default = /*#__PURE__*/__webpack_require__.n(store_legacy);\n\n// EXTERNAL MODULE: ./src/components/index.ts + 12 modules\nvar components = __webpack_require__("Nhdc");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/style/index.less\nvar es_style = __webpack_require__("cIOH");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/list/style/index.less\nvar list_style = __webpack_require__("3wW7");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/empty/style/index.js\nvar empty_style = __webpack_require__("R9oj");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/spin/style/index.js\nvar spin_style = __webpack_require__("T2oS");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/pagination/style/index.js\nvar pagination_style = __webpack_require__("DjyN");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/grid/style/index.js\nvar grid_style = __webpack_require__("1GLa");\n\n// CONCATENATED MODULE: ./node_modules/antd/es/list/style/index.js\n\n // style dependencies\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("wx14");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__("ODXe");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__("U8pU");\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__("TSYQ");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/antd/es/spin/index.js\nvar spin = __webpack_require__("W9HT");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/grid/hooks/useBreakpoint.js\nvar useBreakpoint = __webpack_require__("5OYt");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/_util/responsiveObserve.js\nvar responsiveObserve = __webpack_require__("ACnJ");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/context.js + 1 modules\nvar context = __webpack_require__("H84U");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/pagination/index.js + 2 modules\nvar es_pagination = __webpack_require__("NUBc");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/grid/row.js\nvar row = __webpack_require__("qrJ5");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/grid/col.js\nvar col = __webpack_require__("/kpp");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/_util/reactNode.js\nvar reactNode = __webpack_require__("0n0R");\n\n// CONCATENATED MODULE: ./node_modules/antd/es/list/Item.js\n\n\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\n\n\n\n\n\n\nvar Item_Meta = function Meta(_a) {\n  var customizePrefixCls = _a.prefixCls,\n      className = _a.className,\n      avatar = _a.avatar,\n      title = _a.title,\n      description = _a.description,\n      others = __rest(_a, ["prefixCls", "className", "avatar", "title", "description"]);\n\n  var _React$useContext = react["useContext"](context["b" /* ConfigContext */]),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls(\'list\', customizePrefixCls);\n  var classString = classnames_default()("".concat(prefixCls, "-item-meta"), className);\n  var content = /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-item-meta-content")\n  }, title && /*#__PURE__*/react["createElement"]("h4", {\n    className: "".concat(prefixCls, "-item-meta-title")\n  }, title), description && /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-item-meta-description")\n  }, description));\n  return /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({}, others, {\n    className: classString\n  }), avatar && /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-item-meta-avatar")\n  }, avatar), (title || description) && content);\n};\n\nvar Item_Item = function Item(_a) {\n  var customizePrefixCls = _a.prefixCls,\n      children = _a.children,\n      actions = _a.actions,\n      extra = _a.extra,\n      className = _a.className,\n      colStyle = _a.colStyle,\n      others = __rest(_a, ["prefixCls", "children", "actions", "extra", "className", "colStyle"]);\n\n  var _React$useContext2 = react["useContext"](ListContext),\n      grid = _React$useContext2.grid,\n      itemLayout = _React$useContext2.itemLayout;\n\n  var _React$useContext3 = react["useContext"](context["b" /* ConfigContext */]),\n      getPrefixCls = _React$useContext3.getPrefixCls;\n\n  var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular() {\n    var result;\n    react["Children"].forEach(children, function (element) {\n      if (typeof element === \'string\') {\n        result = true;\n      }\n    });\n    return result && react["Children"].count(children) > 1;\n  };\n\n  var isFlexMode = function isFlexMode() {\n    if (itemLayout === \'vertical\') {\n      return !!extra;\n    }\n\n    return !isItemContainsTextNodeAndNotSingular();\n  };\n\n  var prefixCls = getPrefixCls(\'list\', customizePrefixCls);\n  var actionsContent = actions && actions.length > 0 && /*#__PURE__*/react["createElement"]("ul", {\n    className: "".concat(prefixCls, "-item-action"),\n    key: "actions"\n  }, actions.map(function (action, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      react["createElement"]("li", {\n        key: "".concat(prefixCls, "-item-action-").concat(i)\n      }, action, i !== actions.length - 1 && /*#__PURE__*/react["createElement"]("em", {\n        className: "".concat(prefixCls, "-item-action-split")\n      }))\n    );\n  }));\n  var Element = grid ? \'div\' : \'li\';\n  var itemChildren = /*#__PURE__*/react["createElement"](Element, Object(esm_extends["a" /* default */])({}, others, {\n    // `li` element `onCopy` prop args is not same as `div`\n    className: classnames_default()("".concat(prefixCls, "-item"), Object(defineProperty["a" /* default */])({}, "".concat(prefixCls, "-item-no-flex"), !isFlexMode()), className)\n  }), itemLayout === \'vertical\' && extra ? [/*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-item-main"),\n    key: "content"\n  }, children, actionsContent), /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-item-extra"),\n    key: "extra"\n  }, extra)] : [children, actionsContent, Object(reactNode["a" /* cloneElement */])(extra, {\n    key: \'extra\'\n  })]);\n  return grid ? /*#__PURE__*/react["createElement"](col["a" /* default */], {\n    flex: 1,\n    style: colStyle\n  }, itemChildren) : itemChildren;\n};\n\nItem_Item.Meta = Item_Meta;\n/* harmony default export */ var list_Item = (Item_Item);\n// CONCATENATED MODULE: ./node_modules/antd/es/list/index.js\n\n\n\n\n\n\nvar list_rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\n\n\n\n\n\n\n\n\n\nvar ListContext = /*#__PURE__*/react["createContext"]({});\nvar ListConsumer = ListContext.Consumer;\n\nfunction List(_a) {\n  var _classNames;\n\n  var _a$pagination = _a.pagination,\n      pagination = _a$pagination === void 0 ? false : _a$pagination,\n      customizePrefixCls = _a.prefixCls,\n      _a$bordered = _a.bordered,\n      bordered = _a$bordered === void 0 ? false : _a$bordered,\n      _a$split = _a.split,\n      split = _a$split === void 0 ? true : _a$split,\n      className = _a.className,\n      children = _a.children,\n      itemLayout = _a.itemLayout,\n      loadMore = _a.loadMore,\n      grid = _a.grid,\n      _a$dataSource = _a.dataSource,\n      dataSource = _a$dataSource === void 0 ? [] : _a$dataSource,\n      size = _a.size,\n      header = _a.header,\n      footer = _a.footer,\n      _a$loading = _a.loading,\n      loading = _a$loading === void 0 ? false : _a$loading,\n      rowKey = _a.rowKey,\n      renderItem = _a.renderItem,\n      locale = _a.locale,\n      rest = list_rest(_a, ["pagination", "prefixCls", "bordered", "split", "className", "children", "itemLayout", "loadMore", "grid", "dataSource", "size", "header", "footer", "loading", "rowKey", "renderItem", "locale"]);\n\n  var paginationObj = pagination && Object(esm_typeof["a" /* default */])(pagination) === \'object\' ? pagination : {};\n\n  var _React$useState = react["useState"](paginationObj.defaultCurrent || 1),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      paginationCurrent = _React$useState2[0],\n      setPaginationCurrent = _React$useState2[1];\n\n  var _React$useState3 = react["useState"](paginationObj.defaultPageSize || 10),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      paginationSize = _React$useState4[0],\n      setPaginationSize = _React$useState4[1];\n\n  var _React$useContext = react["useContext"](context["b" /* ConfigContext */]),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction;\n\n  var defaultPaginationProps = {\n    current: 1,\n    total: 0\n  };\n  var keys = {};\n\n  var triggerPaginationEvent = function triggerPaginationEvent(eventName) {\n    return function (page, pageSize) {\n      setPaginationCurrent(page);\n      setPaginationSize(pageSize);\n\n      if (pagination && pagination[eventName]) {\n        pagination[eventName](page, pageSize);\n      }\n    };\n  };\n\n  var onPaginationChange = triggerPaginationEvent(\'onChange\');\n  var onPaginationShowSizeChange = triggerPaginationEvent(\'onShowSizeChange\');\n\n  var renderInnerItem = function renderInnerItem(item, index) {\n    if (!renderItem) return null;\n    var key;\n\n    if (typeof rowKey === \'function\') {\n      key = rowKey(item);\n    } else if (typeof rowKey === \'string\') {\n      key = item[rowKey];\n    } else {\n      key = item.key;\n    }\n\n    if (!key) {\n      key = "list-item-".concat(index);\n    }\n\n    keys[index] = key;\n    return renderItem(item, index);\n  };\n\n  var isSomethingAfterLastItem = function isSomethingAfterLastItem() {\n    return !!(loadMore || pagination || footer);\n  };\n\n  var renderEmptyFunc = function renderEmptyFunc(prefixCls, renderEmptyHandler) {\n    return /*#__PURE__*/react["createElement"]("div", {\n      className: "".concat(prefixCls, "-empty-text")\n    }, locale && locale.emptyText || renderEmptyHandler(\'List\'));\n  };\n\n  var prefixCls = getPrefixCls(\'list\', customizePrefixCls);\n  var loadingProp = loading;\n\n  if (typeof loadingProp === \'boolean\') {\n    loadingProp = {\n      spinning: loadingProp\n    };\n  }\n\n  var isLoading = loadingProp && loadingProp.spinning; // large => lg\n  // small => sm\n\n  var sizeCls = \'\';\n\n  switch (size) {\n    case \'large\':\n      sizeCls = \'lg\';\n      break;\n\n    case \'small\':\n      sizeCls = \'sm\';\n      break;\n\n    default:\n      break;\n  }\n\n  var classString = classnames_default()(prefixCls, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-vertical"), itemLayout === \'vertical\'), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-split"), split), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-bordered"), bordered), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-loading"), isLoading), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-grid"), grid), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-something-after-last-item"), isSomethingAfterLastItem()), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-rtl"), direction === \'rtl\'), _classNames), className);\n\n  var paginationProps = Object(esm_extends["a" /* default */])(Object(esm_extends["a" /* default */])(Object(esm_extends["a" /* default */])({}, defaultPaginationProps), {\n    total: dataSource.length,\n    current: paginationCurrent,\n    pageSize: paginationSize\n  }), pagination || {});\n\n  var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);\n\n  if (paginationProps.current > largestPage) {\n    paginationProps.current = largestPage;\n  }\n\n  var paginationContent = pagination ? /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-pagination")\n  }, /*#__PURE__*/react["createElement"](es_pagination["a" /* default */], Object(esm_extends["a" /* default */])({}, paginationProps, {\n    onChange: onPaginationChange,\n    onShowSizeChange: onPaginationShowSizeChange\n  }))) : null;\n\n  var splitDataSource = Object(toConsumableArray["a" /* default */])(dataSource);\n\n  if (pagination) {\n    if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {\n      splitDataSource = Object(toConsumableArray["a" /* default */])(dataSource).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);\n    }\n  }\n\n  var screens = Object(useBreakpoint["a" /* default */])();\n  var currentBreakpoint = react["useMemo"](function () {\n    for (var i = 0; i < responsiveObserve["b" /* responsiveArray */].length; i += 1) {\n      var breakpoint = responsiveObserve["b" /* responsiveArray */][i];\n\n      if (screens[breakpoint]) {\n        return breakpoint;\n      }\n    }\n\n    return undefined;\n  }, [screens]);\n  var colStyle = react["useMemo"](function () {\n    if (!grid) {\n      return undefined;\n    }\n\n    var columnCount = currentBreakpoint && grid[currentBreakpoint] ? grid[currentBreakpoint] : grid.column;\n\n    if (columnCount) {\n      return {\n        width: "".concat(100 / columnCount, "%"),\n        maxWidth: "".concat(100 / columnCount, "%")\n      };\n    }\n  }, [grid === null || grid === void 0 ? void 0 : grid.column, currentBreakpoint]);\n  var childrenContent = isLoading && /*#__PURE__*/react["createElement"]("div", {\n    style: {\n      minHeight: 53\n    }\n  });\n\n  if (splitDataSource.length > 0) {\n    var items = splitDataSource.map(function (item, index) {\n      return renderInnerItem(item, index);\n    });\n    var childrenList = react["Children"].map(items, function (child, index) {\n      return /*#__PURE__*/react["createElement"]("div", {\n        key: keys[index],\n        style: colStyle\n      }, child);\n    });\n    childrenContent = grid ? /*#__PURE__*/react["createElement"](row["a" /* default */], {\n      gutter: grid.gutter\n    }, childrenList) : /*#__PURE__*/react["createElement"]("ul", {\n      className: "".concat(prefixCls, "-items")\n    }, items);\n  } else if (!children && !isLoading) {\n    childrenContent = renderEmptyFunc(prefixCls, renderEmpty);\n  }\n\n  var paginationPosition = paginationProps.position || \'bottom\';\n  return /*#__PURE__*/react["createElement"](ListContext.Provider, {\n    value: {\n      grid: grid,\n      itemLayout: itemLayout\n    }\n  }, /*#__PURE__*/react["createElement"]("div", Object(esm_extends["a" /* default */])({\n    className: classString\n  }, rest), (paginationPosition === \'top\' || paginationPosition === \'both\') && paginationContent, header && /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-header")\n  }, header), /*#__PURE__*/react["createElement"](spin["a" /* default */], loadingProp, childrenContent, children), footer && /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-footer")\n  }, footer), loadMore || (paginationPosition === \'bottom\' || paginationPosition === \'both\') && paginationContent));\n}\n\nList.Item = list_Item;\n/* harmony default export */ var es_list = (List);\n// EXTERNAL MODULE: ./node_modules/antd/es/modal/style/index.js\nvar modal_style = __webpack_require__("2qtc");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/modal/index.js + 18 modules\nvar modal = __webpack_require__("kLXV");\n\n// EXTERNAL MODULE: ./src/pages/role/components/List.less?modules\nvar Listmodules = __webpack_require__("c1fT");\nvar Listmodules_default = /*#__PURE__*/__webpack_require__.n(Listmodules);\n\n// CONCATENATED MODULE: ./src/pages/role/components/List.tsx\n\n\n\n\n\n/*\r\n * @Author: tkiddo\r\n * @Date: 2021-02-02 14:44:26\r\n * @LastEditors: tkiddo\r\n * @LastEditTime: 2021-02-03 10:56:05\r\n * @Description:\r\n */\n\n\nvar List_confirm = modal["a" /* default */].confirm;\n\nvar genItem = (_ref) => {\n  var item = _ref.item,\n      dist = _ref.dist,\n      onDeleteItem = _ref.onDeleteItem,\n      onEditItem = _ref.onEditItem;\n  var filteredPermission = dist.filter(d => item.permission.includes(d.id));\n  var nameArray = filteredPermission.map(d => d.zh);\n\n  var handleUpdate = () => {\n    onEditItem(item);\n  };\n\n  var handleDelete = () => {\n    List_confirm({\n      title: "\\u4F60\\u786E\\u5B9A\\u5220\\u9664\\u8FD9\\u6761\\u8BB0\\u5F55\\u5417?",\n\n      onOk() {\n        onDeleteItem(item._id);\n      }\n\n    });\n  };\n\n  return /*#__PURE__*/react_default.a.createElement(es_list.Item, null, /*#__PURE__*/react_default.a.createElement(es_list.Item.Meta, {\n    title: item.name,\n    description: "\\u6743\\u9650\\uFF1A".concat(nameArray.join(\'\uff0c\'))\n  }), /*#__PURE__*/react_default.a.createElement("div", {\n    className: Listmodules_default.a.button,\n    onClick: handleUpdate\n  }, "\\u66F4\\u65B0"), /*#__PURE__*/react_default.a.createElement("div", {\n    className: Listmodules_default.a.button,\n    onClick: handleDelete\n  }, "\\u5220\\u9664"));\n};\n\nvar ListComp = (_ref2) => {\n  var data = _ref2.data,\n      dist = _ref2.dist,\n      loading = _ref2.loading,\n      onDeleteItem = _ref2.onDeleteItem,\n      onEditItem = _ref2.onEditItem;\n  return /*#__PURE__*/react_default.a.createElement(es_list, {\n    itemLayout: "horizontal",\n    loading: loading,\n    dataSource: data,\n    renderItem: item => genItem({\n      item,\n      dist,\n      onDeleteItem,\n      onEditItem\n    })\n  });\n};\n\n/* harmony default export */ var components_List = (ListComp);\n// EXTERNAL MODULE: ./node_modules/@umijs/babel-preset-umi/node_modules/@babel/runtime/helpers/esm/extends.js\nvar helpers_esm_extends = __webpack_require__("0Owb");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/input/style/index.js\nvar input_style = __webpack_require__("5NDa");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/input/index.js + 6 modules\nvar input = __webpack_require__("5rEg");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/tree-select/style/index.less\nvar tree_select_style = __webpack_require__("0fbx");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/select/style/index.js\nvar select_style = __webpack_require__("OaEy");\n\n// CONCATENATED MODULE: ./node_modules/antd/es/tree-select/style/index.js\n\n // style dependencies\n// deps-lint-skip: tree\n\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__("1OyB");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__("vuIU");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__("Ji7U");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 1 modules\nvar createSuper = __webpack_require__("LK+K");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("VTBJ");\n\n// EXTERNAL MODULE: ./node_modules/rc-select/es/generate.js + 16 modules\nvar generate = __webpack_require__("qNPg");\n\n// EXTERNAL MODULE: ./node_modules/rc-select/es/utils/valueUtil.js\nvar valueUtil = __webpack_require__("2Qr1");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/treeUtil.js\nvar treeUtil = __webpack_require__("815F");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/utils/conductUtil.js\nvar conductUtil = __webpack_require__("NvD2");\n\n// EXTERNAL MODULE: ./node_modules/rc-select/es/interface/generator.js\nvar generator = __webpack_require__("wPlo");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMergedState.js\nvar useMergedState = __webpack_require__("6cGi");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__("Kwbf");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/KeyCode.js\nvar KeyCode = __webpack_require__("4IlW");\n\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useMemo.js\nvar useMemo = __webpack_require__("YrtM");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__("JX7q");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/contextTypes.js\nvar contextTypes = __webpack_require__("sboe");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/util.js\nvar util = __webpack_require__("OZM5");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("Ff2n");\n\n// EXTERNAL MODULE: ./node_modules/rc-virtual-list/es/index.js + 15 modules\nvar es = __webpack_require__("+nKL");\n\n// EXTERNAL MODULE: ./node_modules/rc-motion/es/index.js + 12 modules\nvar rc_motion_es = __webpack_require__("8XRh");\n\n// EXTERNAL MODULE: ./node_modules/rc-tree/es/TreeNode.js + 1 modules\nvar TreeNode = __webpack_require__("WaYH");\n\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/MotionTreeNode.js\n\n\n\n\n\n\n\n\n\n\n\nvar MotionTreeNode_MotionTreeNode = function MotionTreeNode(_ref, ref) {\n  var className = _ref.className,\n      style = _ref.style,\n      motion = _ref.motion,\n      motionNodes = _ref.motionNodes,\n      motionType = _ref.motionType,\n      onOriginMotionStart = _ref.onMotionStart,\n      onOriginMotionEnd = _ref.onMotionEnd,\n      active = _ref.active,\n      treeNodeRequiredProps = _ref.treeNodeRequiredProps,\n      props = Object(objectWithoutProperties["a" /* default */])(_ref, ["className", "style", "motion", "motionNodes", "motionType", "onMotionStart", "onMotionEnd", "active", "treeNodeRequiredProps"]);\n\n  var _React$useState = react["useState"](true),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useContext = react["useContext"](contextTypes["a" /* TreeContext */]),\n      prefixCls = _React$useContext.prefixCls;\n\n  var motionedRef = react["useRef"](false);\n\n  var onMotionEnd = function onMotionEnd() {\n    if (!motionedRef.current) {\n      onOriginMotionEnd();\n    }\n\n    motionedRef.current = true;\n  };\n\n  Object(react["useEffect"])(function () {\n    if (motionNodes && motionType === \'hide\' && visible) {\n      setVisible(false);\n    }\n  }, [motionNodes]);\n  Object(react["useEffect"])(function () {\n    // Trigger motion only when patched\n    if (motionNodes) {\n      onOriginMotionStart();\n    }\n\n    return function () {\n      if (motionNodes) {\n        onMotionEnd();\n      }\n    };\n  }, []);\n\n  if (motionNodes) {\n    return /*#__PURE__*/react["createElement"](rc_motion_es["b" /* default */], Object(esm_extends["a" /* default */])({\n      ref: ref,\n      visible: visible\n    }, motion, {\n      motionAppear: motionType === \'show\',\n      onAppearEnd: onMotionEnd,\n      onLeaveEnd: onMotionEnd\n    }), function (_ref2, motionRef) {\n      var motionClassName = _ref2.className,\n          motionStyle = _ref2.style;\n      return /*#__PURE__*/react["createElement"]("div", {\n        ref: motionRef,\n        className: classnames_default()("".concat(prefixCls, "-treenode-motion"), motionClassName),\n        style: motionStyle\n      }, motionNodes.map(function (treeNode) {\n        var _treeNode$data = treeNode.data,\n            key = _treeNode$data.key,\n            restProps = Object(objectWithoutProperties["a" /* default */])(_treeNode$data, ["key"]),\n            isStart = treeNode.isStart,\n            isEnd = treeNode.isEnd;\n\n        delete restProps.children;\n        var treeNodeProps = Object(treeUtil["f" /* getTreeNodeProps */])(key, treeNodeRequiredProps);\n        return /*#__PURE__*/react["createElement"](TreeNode["a" /* default */], Object(esm_extends["a" /* default */])({}, restProps, treeNodeProps, {\n          active: active,\n          data: treeNode.data,\n          key: key,\n          isStart: isStart,\n          isEnd: isEnd\n        }));\n      }));\n    });\n  }\n\n  return /*#__PURE__*/react["createElement"](TreeNode["a" /* default */], Object(esm_extends["a" /* default */])({\n    domRef: ref,\n    className: className,\n    style: style\n  }, props, {\n    active: active\n  }));\n};\n\nMotionTreeNode_MotionTreeNode.displayName = \'MotionTreeNode\';\nvar RefMotionTreeNode = /*#__PURE__*/react["forwardRef"](MotionTreeNode_MotionTreeNode);\n/* harmony default export */ var es_MotionTreeNode = (RefMotionTreeNode);\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/utils/diffUtil.js\nfunction findExpandedKeys() {\n  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var prevLen = prev.length;\n  var nextLen = next.length;\n\n  if (Math.abs(prevLen - nextLen) !== 1) {\n    return {\n      add: false,\n      key: null\n    };\n  }\n\n  function find(shorter, longer) {\n    var cache = new Map();\n    shorter.forEach(function (key) {\n      cache.set(key, true);\n    });\n    var keys = longer.filter(function (key) {\n      return !cache.has(key);\n    });\n    return keys.length === 1 ? keys[0] : null;\n  }\n\n  if (prevLen < nextLen) {\n    return {\n      add: true,\n      key: find(prev, next)\n    };\n  }\n\n  return {\n    add: false,\n    key: find(next, prev)\n  };\n}\nfunction getExpandRange(shorter, longer, key) {\n  var shorterStartIndex = shorter.findIndex(function (_ref) {\n    var data = _ref.data;\n    return data.key === key;\n  });\n  var shorterEndNode = shorter[shorterStartIndex + 1];\n  var longerStartIndex = longer.findIndex(function (_ref2) {\n    var data = _ref2.data;\n    return data.key === key;\n  });\n\n  if (shorterEndNode) {\n    var longerEndIndex = longer.findIndex(function (_ref3) {\n      var data = _ref3.data;\n      return data.key === shorterEndNode.data.key;\n    });\n    return longer.slice(longerStartIndex + 1, longerEndIndex);\n  }\n\n  return longer.slice(longerStartIndex + 1);\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/NodeList.js\n\n\n\n\n/**\n * Handle virtual list of the TreeNodes.\n */\n\n\n\n\n\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: \'flex\',\n  overflow: \'hidden\',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar noop = function noop() {};\n\nvar MOTION_KEY = "RC_TREE_MOTION_".concat(Math.random());\nvar MotionNode = {\n  key: MOTION_KEY\n};\nvar MotionEntity = {\n  key: MOTION_KEY,\n  level: 0,\n  index: 0,\n  pos: \'0\',\n  node: MotionNode\n};\nvar MotionFlattenData = {\n  parent: null,\n  children: [],\n  pos: MotionEntity.pos,\n  data: MotionNode,\n\n  /** Hold empty list here since we do not use it */\n  isStart: [],\n  isEnd: []\n};\n/**\n * We only need get visible content items to play the animation.\n */\n\nfunction getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {\n  if (virtual === false || !height) {\n    return list;\n  }\n\n  return list.slice(0, Math.ceil(height / itemHeight) + 1);\n}\n\nfunction itemKey(item) {\n  var key = item.data.key,\n      pos = item.pos;\n  return Object(treeUtil["e" /* getKey */])(key, pos);\n}\n\nfunction getAccessibilityPath(item) {\n  var path = String(item.data.key);\n  var current = item;\n\n  while (current.parent) {\n    current = current.parent;\n    path = "".concat(current.data.key, " > ").concat(path);\n  }\n\n  return path;\n}\n\nvar NodeList_RefNodeList = function RefNodeList(props, ref) {\n  var prefixCls = props.prefixCls,\n      data = props.data,\n      selectable = props.selectable,\n      checkable = props.checkable,\n      expandedKeys = props.expandedKeys,\n      selectedKeys = props.selectedKeys,\n      checkedKeys = props.checkedKeys,\n      loadedKeys = props.loadedKeys,\n      loadingKeys = props.loadingKeys,\n      halfCheckedKeys = props.halfCheckedKeys,\n      keyEntities = props.keyEntities,\n      disabled = props.disabled,\n      dragging = props.dragging,\n      dragOverNodeKey = props.dragOverNodeKey,\n      dropPosition = props.dropPosition,\n      motion = props.motion,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      focusable = props.focusable,\n      activeItem = props.activeItem,\n      focused = props.focused,\n      tabIndex = props.tabIndex,\n      onKeyDown = props.onKeyDown,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onActiveChange = props.onActiveChange,\n      onListChangeStart = props.onListChangeStart,\n      onListChangeEnd = props.onListChangeEnd,\n      domProps = Object(objectWithoutProperties["a" /* default */])(props, ["prefixCls", "data", "selectable", "checkable", "expandedKeys", "selectedKeys", "checkedKeys", "loadedKeys", "loadingKeys", "halfCheckedKeys", "keyEntities", "disabled", "dragging", "dragOverNodeKey", "dropPosition", "motion", "height", "itemHeight", "virtual", "focusable", "activeItem", "focused", "tabIndex", "onKeyDown", "onFocus", "onBlur", "onActiveChange", "onListChangeStart", "onListChangeEnd"]); // =============================== Ref ================================\n\n\n  var listRef = react["useRef"](null);\n  var indentMeasurerRef = react["useRef"](null);\n  react["useImperativeHandle"](ref, function () {\n    return {\n      scrollTo: function scrollTo(scroll) {\n        listRef.current.scrollTo(scroll);\n      },\n      getIndentWidth: function getIndentWidth() {\n        return indentMeasurerRef.current.offsetWidth;\n      }\n    };\n  }); // ============================== Motion ==============================\n\n  var _React$useState = react["useState"](expandedKeys),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      prevExpandedKeys = _React$useState2[0],\n      setPrevExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = react["useState"](data),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      prevData = _React$useState4[0],\n      setPrevData = _React$useState4[1];\n\n  var _React$useState5 = react["useState"](data),\n      _React$useState6 = Object(slicedToArray["a" /* default */])(_React$useState5, 2),\n      transitionData = _React$useState6[0],\n      setTransitionData = _React$useState6[1];\n\n  var _React$useState7 = react["useState"]([]),\n      _React$useState8 = Object(slicedToArray["a" /* default */])(_React$useState7, 2),\n      transitionRange = _React$useState8[0],\n      setTransitionRange = _React$useState8[1];\n\n  var _React$useState9 = react["useState"](null),\n      _React$useState10 = Object(slicedToArray["a" /* default */])(_React$useState9, 2),\n      motionType = _React$useState10[0],\n      setMotionType = _React$useState10[1];\n\n  function onMotionEnd() {\n    setPrevData(data);\n    setTransitionData(data);\n    setTransitionRange([]);\n    setMotionType(null);\n    onListChangeEnd();\n  } // Do animation if expanded keys changed\n\n\n  react["useEffect"](function () {\n    setPrevExpandedKeys(expandedKeys);\n    var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);\n\n    if (diffExpanded.key !== null) {\n      if (diffExpanded.add) {\n        var keyIndex = prevData.findIndex(function (_ref) {\n          var key = _ref.data.key;\n          return key === diffExpanded.key;\n        });\n        var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);\n        var newTransitionData = prevData.slice();\n        newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);\n        setTransitionData(newTransitionData);\n        setTransitionRange(rangeNodes);\n        setMotionType(\'show\');\n      } else {\n        var _keyIndex = data.findIndex(function (_ref2) {\n          var key = _ref2.data.key;\n          return key === diffExpanded.key;\n        });\n\n        var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);\n\n        var _newTransitionData = data.slice();\n\n        _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);\n\n        setTransitionData(_newTransitionData);\n        setTransitionRange(_rangeNodes);\n        setMotionType(\'hide\');\n      }\n    } else if (prevData !== data) {\n      // If whole data changed, we just refresh the list\n      setPrevData(data);\n      setTransitionData(data);\n    }\n  }, [expandedKeys, data]); // We should clean up motion if is changed by dragging\n\n  react["useEffect"](function () {\n    if (!dragging) {\n      onMotionEnd();\n    }\n  }, [dragging]);\n  var mergedData = motion ? transitionData : data;\n  var treeNodeRequiredProps = {\n    expandedKeys: expandedKeys,\n    selectedKeys: selectedKeys,\n    loadedKeys: loadedKeys,\n    loadingKeys: loadingKeys,\n    checkedKeys: checkedKeys,\n    halfCheckedKeys: halfCheckedKeys,\n    dragOverNodeKey: dragOverNodeKey,\n    dropPosition: dropPosition,\n    keyEntities: keyEntities\n  };\n  return /*#__PURE__*/react["createElement"](react["Fragment"], null, focused && activeItem && /*#__PURE__*/react["createElement"]("span", {\n    style: HIDDEN_STYLE,\n    "aria-live": "assertive"\n  }, getAccessibilityPath(activeItem)), /*#__PURE__*/react["createElement"]("div", {\n    role: "tree"\n  }, /*#__PURE__*/react["createElement"]("input", {\n    style: HIDDEN_STYLE,\n    disabled: focusable === false || disabled,\n    tabIndex: focusable !== false ? tabIndex : null,\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    value: "",\n    onChange: noop\n  })), /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-treenode"),\n    "aria-hidden": true,\n    style: {\n      position: \'absolute\',\n      pointerEvents: \'none\',\n      visibility: \'hidden\',\n      height: 0,\n      overflow: \'hidden\'\n    }\n  }, /*#__PURE__*/react["createElement"]("div", {\n    className: "".concat(prefixCls, "-indent")\n  }, /*#__PURE__*/react["createElement"]("div", {\n    ref: indentMeasurerRef,\n    className: "".concat(prefixCls, "-indent-unit")\n  }))), /*#__PURE__*/react["createElement"](es["a" /* default */], Object(esm_extends["a" /* default */])({}, domProps, {\n    data: mergedData,\n    itemKey: itemKey,\n    height: height,\n    fullHeight: false,\n    virtual: virtual,\n    itemHeight: itemHeight,\n    prefixCls: "".concat(prefixCls, "-list"),\n    ref: listRef\n  }), function (treeNode) {\n    var pos = treeNode.pos,\n        _treeNode$data = treeNode.data,\n        key = _treeNode$data.key,\n        restProps = Object(objectWithoutProperties["a" /* default */])(_treeNode$data, ["key"]),\n        isStart = treeNode.isStart,\n        isEnd = treeNode.isEnd;\n\n    var mergedKey = Object(treeUtil["e" /* getKey */])(key, pos);\n    delete restProps.children;\n    var treeNodeProps = Object(treeUtil["f" /* getTreeNodeProps */])(mergedKey, treeNodeRequiredProps);\n    return /*#__PURE__*/react["createElement"](es_MotionTreeNode, Object(esm_extends["a" /* default */])({}, restProps, treeNodeProps, {\n      active: !!activeItem && key === activeItem.data.key,\n      pos: pos,\n      data: treeNode.data,\n      isStart: isStart,\n      isEnd: isEnd,\n      motion: motion,\n      motionNodes: key === MOTION_KEY ? transitionRange : null,\n      motionType: motionType,\n      onMotionStart: onListChangeStart,\n      onMotionEnd: onMotionEnd,\n      treeNodeRequiredProps: treeNodeRequiredProps,\n      onMouseMove: function onMouseMove() {\n        onActiveChange(null);\n      }\n    }));\n  }));\n};\n\nvar NodeList = /*#__PURE__*/react["forwardRef"](NodeList_RefNodeList);\nNodeList.displayName = \'NodeList\';\n/* harmony default export */ var es_NodeList = (NodeList);\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/DropIndicator.js\n\nfunction DropIndicator(_ref) {\n  var dropPosition = _ref.dropPosition,\n      dropLevelOffset = _ref.dropLevelOffset,\n      indent = _ref.indent;\n  var style = {\n    pointerEvents: \'none\',\n    position: \'absolute\',\n    right: 0,\n    backgroundColor: \'red\',\n    height: 2\n  };\n\n  switch (dropPosition) {\n    case -1:\n      style.top = 0;\n      style.left = -dropLevelOffset * indent;\n      break;\n\n    case 1:\n      style.bottom = 0;\n      style.left = -dropLevelOffset * indent;\n      break;\n\n    case 0:\n      style.bottom = 0;\n      style.left = indent;\n      break;\n  }\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    style: style\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/Tree.js\n\n\n\n\n\n\n\n\n\n// TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\n\n\n\n\n\n\n\n\n\n\n\n\nvar Tree_Tree = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(Tree, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(Tree);\n\n  function Tree() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Tree);\n\n    _this = _super.apply(this, arguments);\n    _this.destroyed = false;\n    _this.state = {\n      keyEntities: {},\n      indent: null,\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      expandedKeys: [],\n      dragging: false,\n      dragChildrenKeys: [],\n      // dropTargetKey is the key of abstract-drop-node\n      // the abstract-drop-node is the real drop node when drag and drop\n      // not the DOM drag over node\n      dropTargetKey: null,\n      dropPosition: null,\n      dropContainerKey: null,\n      dropLevelOffset: null,\n      dropTargetPos: null,\n      dropAllowed: true,\n      // the abstract-drag-over-node\n      // if mouse is on the bottom of top dom node or no the top of the bottom dom node\n      // abstract-drag-over-node is the top node\n      dragOverNodeKey: null,\n      treeData: [],\n      flattenNodes: [],\n      focused: false,\n      activeKey: null,\n      listChanging: false,\n      prevProps: null\n    };\n    _this.dragStartMousePosition = null;\n    _this.listRef = /*#__PURE__*/react["createRef"]();\n\n    _this.onNodeDragStart = function (event, node) {\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          keyEntities = _this$state.keyEntities;\n      var onDragStart = _this.props.onDragStart;\n      var eventKey = node.props.eventKey;\n      _this.dragNode = node;\n      _this.dragStartMousePosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var newExpandedKeys = Object(util["b" /* arrDel */])(expandedKeys, eventKey);\n\n      _this.setState({\n        dragging: true,\n        dragChildrenKeys: Object(util["g" /* getDragChildrenKeys */])(eventKey, keyEntities),\n        indent: _this.listRef.current.getIndentWidth()\n      });\n\n      _this.setExpandedKeys(newExpandedKeys);\n\n      window.addEventListener(\'dragend\', _this.onWindowDragEnd);\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props)\n        });\n      }\n    };\n    /**\n     * [Legacy] Select handler is smaller than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let\'s just keep it to avoid event trigger logic change.\n     */\n\n\n    _this.onNodeDragEnter = function (event, node) {\n      var _this$state2 = _this.state,\n          expandedKeys = _this$state2.expandedKeys,\n          keyEntities = _this$state2.keyEntities,\n          dragChildrenKeys = _this$state2.dragChildrenKeys,\n          flattenNodes = _this$state2.flattenNodes,\n          indent = _this$state2.indent;\n      var _this$props = _this.props,\n          onDragEnter = _this$props.onDragEnter,\n          onExpand = _this$props.onExpand,\n          allowDrop = _this$props.allowDrop,\n          direction = _this$props.direction;\n      var pos = node.props.pos;\n\n      var _assertThisInitialize = Object(assertThisInitialized["a" /* default */])(_this),\n          dragNode = _assertThisInitialize.dragNode;\n\n      var _calcDropPosition = Object(util["c" /* calcDropPosition */])(event, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition.dropPosition,\n          dropLevelOffset = _calcDropPosition.dropLevelOffset,\n          dropTargetKey = _calcDropPosition.dropTargetKey,\n          dropContainerKey = _calcDropPosition.dropContainerKey,\n          dropTargetPos = _calcDropPosition.dropTargetPos,\n          dropAllowed = _calcDropPosition.dropAllowed,\n          dragOverNodeKey = _calcDropPosition.dragOverNodeKey;\n\n      if (!dragNode || // don\'t allow drop inside its children\n      dragChildrenKeys.indexOf(dropTargetKey) !== -1 || // don\'t allow drop when drop is not allowed caculated by calcDropPosition\n      !dropAllowed) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Side effect for delay drag\n\n\n      if (!_this.delayedDragEnterLogic) {\n        _this.delayedDragEnterLogic = {};\n      }\n\n      Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n        clearTimeout(_this.delayedDragEnterLogic[key]);\n      });\n\n      if (dragNode.props.eventKey !== node.props.eventKey) {\n        // hoist expand logic here\n        // since if logic is on the bottom\n        // it will be blocked by abstract dragover node check\n        //   => if you dragenter from top, you mouse will still be consider as in the top node\n        event.persist();\n        _this.delayedDragEnterLogic[pos] = window.setTimeout(function () {\n          if (!_this.state.dragging) return;\n\n          var newExpandedKeys = Object(toConsumableArray["a" /* default */])(expandedKeys);\n\n          var entity = keyEntities[node.props.eventKey];\n\n          if (entity && (entity.children || []).length) {\n            newExpandedKeys = Object(util["a" /* arrAdd */])(expandedKeys, node.props.eventKey);\n          }\n\n          if (!(\'expandedKeys\' in _this.props)) {\n            _this.setExpandedKeys(newExpandedKeys);\n          }\n\n          if (onExpand) {\n            onExpand(newExpandedKeys, {\n              node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props),\n              expanded: true,\n              nativeEvent: event.nativeEvent\n            });\n          }\n        }, 800);\n      } // Skip if drag node is self\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        _this.setState({\n          dragOverNodeKey: null,\n          dropPosition: null,\n          dropLevelOffset: null,\n          dropTargetKey: null,\n          dropContainerKey: null,\n          dropTargetPos: null,\n          dropAllowed: false\n        });\n\n        return;\n      } // Update drag over node and drag state\n\n\n      _this.setState({\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        dropLevelOffset: dropLevelOffset,\n        dropTargetKey: dropTargetKey,\n        dropContainerKey: dropContainerKey,\n        dropTargetPos: dropTargetPos,\n        dropAllowed: dropAllowed\n      });\n\n      if (onDragEnter) {\n        onDragEnter({\n          event: event,\n          node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props),\n          expandedKeys: expandedKeys\n        });\n      }\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var _this$state3 = _this.state,\n          dragChildrenKeys = _this$state3.dragChildrenKeys,\n          flattenNodes = _this$state3.flattenNodes,\n          keyEntities = _this$state3.keyEntities,\n          expandedKeys = _this$state3.expandedKeys,\n          indent = _this$state3.indent;\n      var _this$props2 = _this.props,\n          onDragOver = _this$props2.onDragOver,\n          allowDrop = _this$props2.allowDrop,\n          direction = _this$props2.direction;\n\n      var _assertThisInitialize2 = Object(assertThisInitialized["a" /* default */])(_this),\n          dragNode = _assertThisInitialize2.dragNode;\n\n      var _calcDropPosition2 = Object(util["c" /* calcDropPosition */])(event, node, indent, _this.dragStartMousePosition, allowDrop, flattenNodes, keyEntities, expandedKeys, direction),\n          dropPosition = _calcDropPosition2.dropPosition,\n          dropLevelOffset = _calcDropPosition2.dropLevelOffset,\n          dropTargetKey = _calcDropPosition2.dropTargetKey,\n          dropContainerKey = _calcDropPosition2.dropContainerKey,\n          dropAllowed = _calcDropPosition2.dropAllowed,\n          dropTargetPos = _calcDropPosition2.dropTargetPos,\n          dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;\n\n      if (!dragNode || dragChildrenKeys.indexOf(dropTargetKey) !== -1 || !dropAllowed) {\n        // don\'t allow drop inside its children\n        // don\'t allow drop when drop is not allowed caculated by calcDropPosition\n        return;\n      } // Update drag position\n\n\n      if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {\n        if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {\n          _this.setState({\n            dropPosition: null,\n            dropLevelOffset: null,\n            dropTargetKey: null,\n            dropContainerKey: null,\n            dropTargetPos: null,\n            dropAllowed: false,\n            dragOverNodeKey: null\n          });\n        }\n      } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {\n        _this.setState({\n          dropPosition: dropPosition,\n          dropLevelOffset: dropLevelOffset,\n          dropTargetKey: dropTargetKey,\n          dropContainerKey: dropContainerKey,\n          dropTargetPos: dropTargetPos,\n          dropAllowed: dropAllowed,\n          dragOverNodeKey: dragOverNodeKey\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props)\n        });\n      }\n    }; // since stopPropagation() is called in treeNode\n    // if onWindowDrag is called, whice means state is keeped, drag state should be cleared\n\n\n    _this.onWindowDragEnd = function (event) {\n      _this.onNodeDragEnd(event, null, true);\n\n      window.removeEventListener(\'dragend\', _this.onWindowDragEnd);\n    }; // if onNodeDragEnd is called, onWindowDragEnd won\'t be called since stopPropagation() is called\n\n\n    _this.onNodeDragEnd = function (event, node) {\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (onDragEnd && !outsideTree) {\n        onDragEnd({\n          event: event,\n          node: Object(treeUtil["b" /* convertNodePropsToEventData */])(node.props)\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$getActiveItem;\n\n      var outsideTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$state4 = _this.state,\n          dragChildrenKeys = _this$state4.dragChildrenKeys,\n          dropPosition = _this$state4.dropPosition,\n          dropTargetKey = _this$state4.dropTargetKey,\n          dropTargetPos = _this$state4.dropTargetPos,\n          dropAllowed = _this$state4.dropAllowed;\n      if (!dropAllowed) return;\n      var onDrop = _this.props.onDrop;\n\n      _this.setState({\n        dragOverNodeKey: null\n      });\n\n      _this.cleanDragState();\n\n      if (dropTargetKey === null) return;\n\n      var abstractDropNodeProps = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, Object(treeUtil["f" /* getTreeNodeProps */])(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {\n        active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.data.key) === dropTargetKey,\n        data: _this.state.keyEntities[dropTargetKey].node\n      });\n\n      var dropToChild = dragChildrenKeys.indexOf(dropTargetKey) !== -1;\n      Object(warning["a" /* default */])(!dropToChild, "Can not drop to dragNode\'s children node. This is a bug of rc-tree. Please report an issue.");\n      var posArr = Object(util["k" /* posToArr */])(dropTargetPos);\n      var dropResult = {\n        event: event,\n        node: Object(treeUtil["b" /* convertNodePropsToEventData */])(abstractDropNodeProps),\n        dragNode: _this.dragNode ? Object(treeUtil["b" /* convertNodePropsToEventData */])(_this.dragNode.props) : null,\n        dragNodesKeys: [_this.dragNode.props.eventKey].concat(dragChildrenKeys),\n        dropToGap: dropPosition !== 0,\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (onDrop && !outsideTree) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.cleanDragState = function () {\n      var dragging = _this.state.dragging;\n\n      if (dragging) {\n        _this.setState({\n          dragging: false,\n          dropPosition: null,\n          dropContainerKey: null,\n          dropTargetKey: null,\n          dropLevelOffset: null,\n          dropAllowed: true,\n          dragOverNodeKey: null\n        });\n      }\n\n      _this.dragStartMousePosition = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          multiple = _this$props3.multiple;\n      var selected = treeNode.selected,\n          key = treeNode.key;\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = Object(util["b" /* arrDel */])(selectedKeys, key);\n      } else if (!multiple) {\n        selectedKeys = [key];\n      } else {\n        selectedKeys = Object(util["a" /* arrAdd */])(selectedKeys, key);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (selectedKey) {\n        var entity = keyEntities[selectedKey];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        onSelect(selectedKeys, {\n          event: \'select\',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state5 = _this.state,\n          keyEntities = _this$state5.keyEntities,\n          oriCheckedKeys = _this$state5.checkedKeys,\n          oriHalfCheckedKeys = _this$state5.halfCheckedKeys;\n      var _this$props4 = _this.props,\n          checkStrictly = _this$props4.checkStrictly,\n          onCheck = _this$props4.onCheck;\n      var key = treeNode.key; // Prepare trigger arguments\n\n      var checkedObj;\n      var eventObj = {\n        event: \'check\',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? Object(util["a" /* arrAdd */])(oriCheckedKeys, key) : Object(util["b" /* arrDel */])(oriCheckedKeys, key);\n        var halfCheckedKeys = Object(util["b" /* arrDel */])(oriHalfCheckedKeys, key);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (checkedKey) {\n          return keyEntities[checkedKey];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        // Always fill first\n        var _conductCheck = Object(conductUtil["a" /* conductCheck */])([].concat(Object(toConsumableArray["a" /* default */])(oriCheckedKeys), [key]), true, keyEntities),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys; // If remove, we do it again to correction\n\n\n        if (!checked) {\n          var keySet = new Set(_checkedKeys);\n          keySet.delete(key);\n\n          var _conductCheck2 = Object(conductUtil["a" /* conductCheck */])(Array.from(keySet), {\n            checked: false,\n            halfCheckedKeys: _halfCheckedKeys\n          }, keyEntities);\n\n          _checkedKeys = _conductCheck2.checkedKeys;\n          _halfCheckedKeys = _conductCheck2.halfCheckedKeys;\n        }\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (checkedKey) {\n          var entity = keyEntities[checkedKey];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys\n        }, false, {\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;\n          var _this$props5 = _this.props,\n              loadData = _this$props5.loadData,\n              onLoad = _this$props5.onLoad;\n          var key = treeNode.key;\n\n          if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var _this$state6 = _this.state,\n                currentLoadedKeys = _this$state6.loadedKeys,\n                currentLoadingKeys = _this$state6.loadingKeys;\n            var newLoadedKeys = Object(util["a" /* arrAdd */])(currentLoadedKeys, key);\n            var newLoadingKeys = Object(util["b" /* arrDel */])(currentLoadingKeys, key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              onLoad(newLoadedKeys, {\n                event: \'load\',\n                node: treeNode\n              });\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            loadingKeys: Object(util["a" /* arrAdd */])(loadingKeys, key)\n          };\n        });\n      });\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onFocus = function () {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus.apply(void 0, arguments);\n      }\n    };\n\n    _this.onBlur = function () {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      _this.onActiveChange(null);\n\n      if (onBlur) {\n        onBlur.apply(void 0, arguments);\n      }\n    };\n\n    _this.getTreeNodeRequiredProps = function () {\n      var _this$state7 = _this.state,\n          expandedKeys = _this$state7.expandedKeys,\n          selectedKeys = _this$state7.selectedKeys,\n          loadedKeys = _this$state7.loadedKeys,\n          loadingKeys = _this$state7.loadingKeys,\n          checkedKeys = _this$state7.checkedKeys,\n          halfCheckedKeys = _this$state7.halfCheckedKeys,\n          dragOverNodeKey = _this$state7.dragOverNodeKey,\n          dropPosition = _this$state7.dropPosition,\n          keyEntities = _this$state7.keyEntities;\n      return {\n        expandedKeys: expandedKeys || [],\n        selectedKeys: selectedKeys || [],\n        loadedKeys: loadedKeys || [],\n        loadingKeys: loadingKeys || [],\n        checkedKeys: checkedKeys || [],\n        halfCheckedKeys: halfCheckedKeys || [],\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        keyEntities: keyEntities\n      };\n    }; // =========================== Expanded ===========================\n\n    /** Set uncontrolled `expandedKeys`. This will also auto update `flattenNodes`. */\n\n\n    _this.setExpandedKeys = function (expandedKeys) {\n      var treeData = _this.state.treeData;\n      var flattenNodes = Object(treeUtil["d" /* flattenTreeData */])(treeData, expandedKeys);\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys,\n        flattenNodes: flattenNodes\n      }, true);\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var listChanging = _this.state.listChanging;\n      var _this$props6 = _this.props,\n          onExpand = _this$props6.onExpand,\n          loadData = _this$props6.loadData;\n      var key = treeNode.key,\n          expanded = treeNode.expanded; // Do nothing when motion is in progress\n\n      if (listChanging) {\n        return;\n      } // Update selected keys\n\n\n      var index = expandedKeys.indexOf(key);\n      var targetExpanded = !expanded;\n      Object(warning["a" /* default */])(expanded && index !== -1 || !expanded && index === -1, \'Expand state not sync with index check\');\n\n      if (targetExpanded) {\n        expandedKeys = Object(util["a" /* arrAdd */])(expandedKeys, key);\n      } else {\n        expandedKeys = Object(util["b" /* arrDel */])(expandedKeys, key);\n      }\n\n      _this.setExpandedKeys(expandedKeys);\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        if (loadPromise) {\n          loadPromise.then(function () {\n            // [Legacy] Refresh logic\n            var newFlattenTreeData = Object(treeUtil["d" /* flattenTreeData */])(_this.state.treeData, expandedKeys);\n\n            _this.setUncontrolledState({\n              flattenNodes: newFlattenTreeData\n            });\n          });\n        }\n      }\n    };\n\n    _this.onListChangeStart = function () {\n      _this.setUncontrolledState({\n        listChanging: true\n      });\n    };\n\n    _this.onListChangeEnd = function () {\n      setTimeout(function () {\n        _this.setUncontrolledState({\n          listChanging: false\n        });\n      });\n    }; // =========================== Keyboard ===========================\n\n\n    _this.onActiveChange = function (newActiveKey) {\n      var activeKey = _this.state.activeKey;\n      var onActiveChange = _this.props.onActiveChange;\n\n      if (activeKey === newActiveKey) {\n        return;\n      }\n\n      _this.setState({\n        activeKey: newActiveKey\n      });\n\n      if (newActiveKey !== null) {\n        _this.scrollTo({\n          key: newActiveKey\n        });\n      }\n\n      if (onActiveChange) {\n        onActiveChange(newActiveKey);\n      }\n    };\n\n    _this.getActiveItem = function () {\n      var _this$state8 = _this.state,\n          activeKey = _this$state8.activeKey,\n          flattenNodes = _this$state8.flattenNodes;\n\n      if (activeKey === null) {\n        return null;\n      }\n\n      return flattenNodes.find(function (_ref2) {\n        var key = _ref2.data.key;\n        return key === activeKey;\n      }) || null;\n    };\n\n    _this.offsetActiveKey = function (offset) {\n      var _this$state9 = _this.state,\n          flattenNodes = _this$state9.flattenNodes,\n          activeKey = _this$state9.activeKey;\n      var index = flattenNodes.findIndex(function (_ref3) {\n        var key = _ref3.data.key;\n        return key === activeKey;\n      }); // Align with index\n\n      if (index === -1 && offset < 0) {\n        index = flattenNodes.length;\n      }\n\n      index = (index + offset + flattenNodes.length) % flattenNodes.length;\n      var item = flattenNodes[index];\n\n      if (item) {\n        var key = item.data.key;\n\n        _this.onActiveChange(key);\n      } else {\n        _this.onActiveChange(null);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$state10 = _this.state,\n          activeKey = _this$state10.activeKey,\n          expandedKeys = _this$state10.expandedKeys,\n          checkedKeys = _this$state10.checkedKeys;\n      var _this$props7 = _this.props,\n          onKeyDown = _this$props7.onKeyDown,\n          checkable = _this$props7.checkable,\n          selectable = _this$props7.selectable; // >>>>>>>>>> Direction\n\n      switch (event.which) {\n        case KeyCode["a" /* default */].UP:\n          {\n            _this.offsetActiveKey(-1);\n\n            event.preventDefault();\n            break;\n          }\n\n        case KeyCode["a" /* default */].DOWN:\n          {\n            _this.offsetActiveKey(1);\n\n            event.preventDefault();\n            break;\n          }\n      } // >>>>>>>>>> Expand & Selection\n\n\n      var activeItem = _this.getActiveItem();\n\n      if (activeItem && activeItem.data) {\n        var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();\n\n        var expandable = activeItem.data.isLeaf === false || !!(activeItem.data.children || []).length;\n        var eventNode = Object(treeUtil["b" /* convertNodePropsToEventData */])(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, Object(treeUtil["f" /* getTreeNodeProps */])(activeKey, treeNodeRequiredProps)), {}, {\n          data: activeItem.data,\n          active: true\n        }));\n\n        switch (event.which) {\n          // >>> Expand\n          case KeyCode["a" /* default */].LEFT:\n            {\n              // Collapse if possible\n              if (expandable && expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.parent) {\n                _this.onActiveChange(activeItem.parent.data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n\n          case KeyCode["a" /* default */].RIGHT:\n            {\n              // Expand if possible\n              if (expandable && !expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.children && activeItem.children.length) {\n                _this.onActiveChange(activeItem.children[0].data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n          // Selection\n\n          case KeyCode["a" /* default */].ENTER:\n          case KeyCode["a" /* default */].SPACE:\n            {\n              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {\n                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {\n                _this.onNodeSelect({}, eventNode);\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    };\n    /**\n     * Only update the value which is not in props\n     */\n\n\n    _this.setUncontrolledState = function (state) {\n      var atomic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var forceState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (_this.destroyed) {\n        return;\n      }\n\n      var needSync = false;\n      var allPassed = true;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) {\n          allPassed = false;\n          return;\n        }\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync && (!atomic || allPassed)) {\n        _this.setState(Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, newState), forceState));\n      }\n    };\n\n    _this.scrollTo = function (scroll) {\n      _this.listRef.current.scrollTo(scroll);\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Tree, [{\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\'dragend\', this.onWindowDragEnd);\n      this.destroyed = true;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _classNames;\n\n      var _this$state11 = this.state,\n          focused = _this$state11.focused,\n          flattenNodes = _this$state11.flattenNodes,\n          keyEntities = _this$state11.keyEntities,\n          dragging = _this$state11.dragging,\n          activeKey = _this$state11.activeKey,\n          dropLevelOffset = _this$state11.dropLevelOffset,\n          dropContainerKey = _this$state11.dropContainerKey,\n          dropTargetKey = _this$state11.dropTargetKey,\n          dropPosition = _this$state11.dropPosition,\n          dragOverNodeKey = _this$state11.dragOverNodeKey,\n          indent = _this$state11.indent;\n      var _this$props8 = this.props,\n          prefixCls = _this$props8.prefixCls,\n          className = _this$props8.className,\n          style = _this$props8.style,\n          showLine = _this$props8.showLine,\n          focusable = _this$props8.focusable,\n          _this$props8$tabIndex = _this$props8.tabIndex,\n          tabIndex = _this$props8$tabIndex === void 0 ? 0 : _this$props8$tabIndex,\n          selectable = _this$props8.selectable,\n          showIcon = _this$props8.showIcon,\n          icon = _this$props8.icon,\n          switcherIcon = _this$props8.switcherIcon,\n          draggable = _this$props8.draggable,\n          checkable = _this$props8.checkable,\n          checkStrictly = _this$props8.checkStrictly,\n          disabled = _this$props8.disabled,\n          motion = _this$props8.motion,\n          loadData = _this$props8.loadData,\n          filterTreeNode = _this$props8.filterTreeNode,\n          height = _this$props8.height,\n          itemHeight = _this$props8.itemHeight,\n          virtual = _this$props8.virtual,\n          titleRender = _this$props8.titleRender,\n          dropIndicatorRender = _this$props8.dropIndicatorRender,\n          onContextMenu = _this$props8.onContextMenu,\n          direction = _this$props8.direction;\n      var domProps = Object(util["f" /* getDataAndAria */])(this.props);\n      return /*#__PURE__*/react["createElement"](contextTypes["a" /* TreeContext */].Provider, {\n        value: {\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          keyEntities: keyEntities,\n          dropLevelOffset: dropLevelOffset,\n          dropContainerKey: dropContainerKey,\n          dropTargetKey: dropTargetKey,\n          dropPosition: dropPosition,\n          dragOverNodeKey: dragOverNodeKey,\n          indent: indent,\n          direction: direction,\n          dropIndicatorRender: dropIndicatorRender,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          titleRender: titleRender,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop\n        }\n      }, /*#__PURE__*/react["createElement"]("div", {\n        className: classnames_default()(prefixCls, className, (_classNames = {}, Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-show-line"), showLine), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-focused"), focused), Object(defineProperty["a" /* default */])(_classNames, "".concat(prefixCls, "-active-focused"), activeKey !== null), _classNames))\n      }, /*#__PURE__*/react["createElement"](es_NodeList, Object(esm_extends["a" /* default */])({\n        ref: this.listRef,\n        prefixCls: prefixCls,\n        style: style,\n        data: flattenNodes,\n        disabled: disabled,\n        selectable: selectable,\n        checkable: !!checkable,\n        motion: motion,\n        dragging: dragging,\n        height: height,\n        itemHeight: itemHeight,\n        virtual: virtual,\n        focusable: focusable,\n        focused: focused,\n        tabIndex: tabIndex,\n        activeItem: this.getActiveItem(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onActiveChange: this.onActiveChange,\n        onListChangeStart: this.onListChangeStart,\n        onListChangeEnd: this.onListChangeEnd,\n        onContextMenu: onContextMenu\n      }, this.getTreeNodeRequiredProps(), domProps))));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeData; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync(\'treeData\')) {\n        treeData = props.treeData;\n      } else if (needSync(\'children\')) {\n        Object(warning["a" /* default */])(false, \'`children` of Tree is deprecated. Please use `treeData` instead.\');\n        treeData = Object(treeUtil["c" /* convertTreeToData */])(props.children);\n      } // Save flatten nodes info and convert `treeData` into keyEntities\n\n\n      if (treeData) {\n        newState.treeData = treeData;\n        var entitiesMap = Object(treeUtil["a" /* convertDataToEntities */])(treeData);\n        newState.keyEntities = Object(objectSpread2["a" /* default */])(Object(defineProperty["a" /* default */])({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities); // Warning if treeNode not provide key\n\n        if (false) {}\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync(\'expandedKeys\') || prevProps && needSync(\'autoExpandParent\')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? Object(util["e" /* conductExpandParent */])(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        var cloneKeyEntities = Object(objectSpread2["a" /* default */])({}, keyEntities);\n\n        delete cloneKeyEntities[MOTION_KEY];\n        newState.expandedKeys = Object.keys(cloneKeyEntities).map(function (key) {\n          return cloneKeyEntities[key].key;\n        });\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? Object(util["e" /* conductExpandParent */])(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      if (!newState.expandedKeys) {\n        delete newState.expandedKeys;\n      } // ================ flattenNodes =================\n\n\n      if (treeData || newState.expandedKeys) {\n        var flattenNodes = Object(treeUtil["d" /* flattenTreeData */])(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);\n        newState.flattenNodes = flattenNodes;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync(\'selectedKeys\')) {\n          newState.selectedKeys = Object(util["d" /* calcSelectedKeys */])(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = Object(util["d" /* calcSelectedKeys */])(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync(\'checkedKeys\')) {\n          checkedKeyEntity = Object(util["j" /* parseCheckedKeys */])(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = Object(util["j" /* parseCheckedKeys */])(props.defaultCheckedKeys) || {};\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          checkedKeyEntity = Object(util["j" /* parseCheckedKeys */])(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = Object(conductUtil["a" /* conductCheck */])(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync(\'loadedKeys\')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Tree;\n}(react["Component"]);\n\nTree_Tree.defaultProps = {\n  prefixCls: \'rc-tree\',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: [],\n  dropIndicatorRender: DropIndicator,\n  allowDrop: function allowDrop() {\n    return true;\n  }\n};\nTree_Tree.TreeNode = TreeNode["a" /* default */];\n/* harmony default export */ var es_Tree = (Tree_Tree);\n// CONCATENATED MODULE: ./node_modules/rc-tree/es/index.js\n\n\n\n/* harmony default export */ var rc_tree_es = (es_Tree);\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/Context.js\n\nvar SelectContext = /*#__PURE__*/react["createContext"](null);\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useKeyValueMapping.js\n\nfunction isDisabled(dataNode, skipType) {\n  if (!dataNode) {\n    return true;\n  }\n\n  var _dataNode$data = dataNode.data,\n      disabled = _dataNode$data.disabled,\n      disableCheckbox = _dataNode$data.disableCheckbox;\n\n  switch (skipType) {\n    case \'select\':\n      return disabled;\n\n    case \'checkbox\':\n      return disabled || disableCheckbox;\n  }\n\n  return false;\n}\nfunction useKeyValueMapping(cacheKeyMap, cacheValueMap) {\n  var getEntityByKey = react["useCallback"](function (key) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'select\';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheKeyMap.get(key);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheKeyMap]);\n  var getEntityByValue = react["useCallback"](function (value) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'select\';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheValueMap.get(value);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheValueMap]);\n  return [getEntityByKey, getEntityByValue];\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useKeyValueMap.js\n\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nfunction useKeyValueMap(flattenOptions) {\n  return react["useMemo"](function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/OptionList.js\n\n\n\n\n\n\n\n\n\nvar OptionList_HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: \'flex\',\n  overflow: \'hidden\',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList_OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent,\n      onMouseEnter = props.onMouseEnter;\n\n  var _React$useContext = react["useContext"](SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = react["useRef"]();\n  var memoOptions = Object(useMemo["a" /* default */])(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = Object(slicedToArray["a" /* default */])(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = Object(slicedToArray["a" /* default */])(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = react["useMemo"](function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = react["useMemo"](function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  react["useEffect"](function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = react["useState"](treeDefaultExpandedKeys),\n      _React$useState2 = Object(slicedToArray["a" /* default */])(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = react["useState"](null),\n      _React$useState4 = Object(slicedToArray["a" /* default */])(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = react["useMemo"](function () {\n    if (treeExpandedKeys) {\n      return Object(toConsumableArray["a" /* default */])(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  react["useEffect"](function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? \'checkbox\' : \'select\');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = react["useState"](null),\n      _React$useState6 = Object(slicedToArray["a" /* default */])(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  react["useImperativeHandle"](ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode["a" /* default */].UP:\n          case KeyCode["a" /* default */].DOWN:\n          case KeyCode["a" /* default */].LEFT:\n          case KeyCode["a" /* default */].RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode["a" /* default */].ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode["a" /* default */].ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return /*#__PURE__*/react["createElement"]("div", {\n      role: "listbox",\n      className: "".concat(prefixCls, "-empty"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/react["createElement"]("div", {\n    onMouseDown: onListMouseDown,\n    onMouseEnter: onMouseEnter\n  }, activeEntity && open && /*#__PURE__*/react["createElement"]("span", {\n    style: OptionList_HIDDEN_STYLE,\n    "aria-live": "assertive"\n  }, activeEntity.data.value), /*#__PURE__*/react["createElement"](rc_tree_es, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: "".concat(prefixCls, "-tree"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/react["forwardRef"](OptionList_OptionList);\nRefOptionList.displayName = \'OptionList\';\n/* harmony default export */ var es_OptionList = (RefOptionList);\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/TreeNode.js\n/** This is a placeholder, not real render in dom */\nvar TreeNode_TreeNode = function TreeNode() {\n  return null;\n};\n\n/* harmony default export */ var es_TreeNode = (TreeNode_TreeNode);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__("Zm9Q");\n\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/legacyUtil.js\n\n\n\n\n\n\nfunction convertChildrenToData(nodes) {\n  return Object(toArray["a" /* default */])(nodes).map(function (node) {\n    if (! /*#__PURE__*/react["isValidElement"](node) || !node.type) {\n      return null;\n    }\n\n    var key = node.key,\n        _node$props = node.props,\n        children = _node$props.children,\n        value = _node$props.value,\n        restProps = Object(objectWithoutProperties["a" /* default */])(_node$props, ["children", "value"]);\n\n    var data = Object(objectSpread2["a" /* default */])({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nfunction fillLegacyProps(dataNode) {\n  // Skip if not dataNode exist\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = Object(objectSpread2["a" /* default */])({}, dataNode);\n\n  if (!(\'props\' in cloneNode)) {\n    Object.defineProperty(cloneNode, \'props\', {\n      get: function get() {\n        Object(warning["a" /* default */])(false, \'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.\');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nfunction fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'0\';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (dataNode, index) {\n        var pos = "".concat(level, "-").concat(index);\n        var included = checkedValues.includes(dataNode.value);\n        var children = dig(dataNode.children || [], pos, included);\n        var node = /*#__PURE__*/react["createElement"](es_TreeNode, Object.assign({}, dataNode), children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === dataNode.value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref, _ref2) {\n        var val1 = _ref.node.props.value;\n        var val2 = _ref2.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, \'triggerNode\', {\n    get: function get() {\n      Object(warning["a" /* default */])(false, \'`triggerNode` is deprecated. Please consider decoupling data with node.\');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, \'allCheckedNodes\', {\n    get: function get() {\n      Object(warning["a" /* default */])(false, \'`allCheckedNodes` is deprecated. Please consider decoupling data with node.\');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref3) {\n        var node = _ref3.node;\n        return node;\n      });\n    }\n  });\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/valueUtil.js\n\n\n\n\nfunction valueUtil_toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nfunction findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data;\n    optionMap.set(data.value, data);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nfunction isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nfunction isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref) {\n  var parent = _ref.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nfunction valueUtil_flattenOptions(options) {\n  // Add missing key\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, node), {}, {\n        key: \'key\' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = Object(treeUtil["d" /* flattenTreeData */])(fillKey(options), true);\n  return flattenList.map(function (node) {\n    return {\n      key: node.data.key,\n      data: node.data,\n      level: getLevel(node)\n    };\n  });\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nfunction filterOptions(searchValue, options, _ref2) {\n  var optionFilterProp = _ref2.optionFilterProp,\n      filterOption = _ref2.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === \'function\') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nfunction getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  valueUtil_toArray(prevValue).forEach(function (item) {\n    if (item && Object(esm_typeof["a" /* default */])(item) === \'object\' && \'value\' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, \'select\', true);\n    var label = entity ? getLabelProp(entity.data) : val;\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = \'label\' in labeledValue ? labeledValue.label : label;\n\n      if (\'halfChecked\' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nfunction addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nfunction removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/warningPropsUtil.js\n\n\n\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  Object(warning["a" /* default */])(!searchPlaceholder, \'`searchPlaceholder` has been removed.\');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    Object(warning["a" /* default */])(false, \'`treeCheckStrictly` will force set `labelInValue` to `true`.\');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    Object(warning["a" /* default */])(valueUtil_toArray(value).every(function (val) {\n      return val && Object(esm_typeof["a" /* default */])(val) === \'object\' && \'value\' in val;\n    }), \'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    Object(warning["a" /* default */])(!value || Array.isArray(value), \'`value` should be an array when `TreeSelect` is checkable or multiple.\');\n  } else {\n    Object(warning["a" /* default */])(!Array.isArray(value), \'`value` should not be array when `TreeSelect` is single mode.\');\n  }\n}\n\n/* harmony default export */ var warningPropsUtil = (warningProps);\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useTreeData.js\n\n\n\n\n\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = Object(objectSpread2["a" /* default */])({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          value = node.value,\n          children = node.children,\n          rest = Object(objectWithoutProperties["a" /* default */])(node, ["key", "value", "children"]);\n\n      var mergedValue = \'value\' in node ? value : key;\n\n      var dataNode = Object(objectSpread2["a" /* default */])(Object(objectSpread2["a" /* default */])({}, rest), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n\n      if (false) {}\n\n      if (\'children\' in node) {\n        dataNode.children = dig(children);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nfunction useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode;\n  var cacheRef = react["useRef"]({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, Object(objectSpread2["a" /* default */])({\n      id: \'id\',\n      pId: \'pId\',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\n  }\n\n  return cacheRef.current.formatTreeData;\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/utils/strategyUtil.js\n\nvar SHOW_ALL = \'SHOW_ALL\';\nvar SHOW_PARENT = \'SHOW_PARENT\';\nvar SHOW_CHILD = \'SHOW_CHILD\';\nfunction formatStrategyKeys(keys, strategy, keyEntities) {\n  var keySet = new Set(keys);\n\n  if (strategy === SHOW_CHILD) {\n    return keys.filter(function (key) {\n      var entity = keyEntities[key];\n\n      if (entity && entity.children && entity.children.every(function (_ref) {\n        var node = _ref.node;\n        return isCheckDisabled(node) || keySet.has(node.key);\n      })) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  if (strategy === SHOW_PARENT) {\n    return keys.filter(function (key) {\n      var entity = keyEntities[key];\n      var parent = entity ? entity.parent : null;\n\n      if (parent && !isCheckDisabled(parent.node) && keySet.has(parent.node.key)) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return keys;\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/hooks/useSelectValues.js\n\n\n\n/** Return  */\n\nfunction useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n      getEntityByValue = _ref.getEntityByValue,\n      getEntityByKey = _ref.getEntityByKey,\n      treeConduction = _ref.treeConduction,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      conductKeyEntities = _ref.conductKeyEntities,\n      getLabelProp = _ref.getLabelProp;\n  return react["useMemo"](function () {\n    var mergedRawValues = rawValues;\n\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/TreeSelect.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar OMIT_PROPS = [\'expandedKeys\', \'treeData\', \'treeCheckable\', \'showCheckedStrategy\', \'searchPlaceholder\', \'treeLine\', \'treeIcon\', \'showTreeIcon\', \'switcherIcon\', \'treeNodeFilterProp\', \'filterTreeNode\', \'dropdownPopupAlign\', \'treeDefaultExpandAll\', \'treeCheckStrictly\', \'treeExpandedKeys\', \'treeLoadedKeys\', \'treeMotion\', \'onTreeExpand\', \'onTreeLoad\', \'loadData\', \'treeDataSimpleMode\', \'treeNodeLabelProp\', \'treeDefaultExpandedKeys\'];\nvar RefSelect = Object(generate["a" /* default */])({\n  prefixCls: \'rc-tree-select\',\n  components: {\n    optionList: es_OptionList\n  },\n  // Not use generate since we will handle ourself\n  convertChildrenToData: function convertChildrenToData() {\n    return null;\n  },\n  flattenOptions: valueUtil_flattenOptions,\n  // Handle `optionLabelProp` in TreeSelect component\n  getLabeledValue: valueUtil["e" /* getLabeledValue */],\n  filterOptions: filterOptions,\n  isValueDisabled: isValueDisabled,\n  findValueOption: findValueOption,\n  omitDOMProps: function omitDOMProps(props) {\n    var cloneProps = Object(objectSpread2["a" /* default */])({}, props);\n\n    OMIT_PROPS.forEach(function (prop) {\n      delete cloneProps[prop];\n    });\n    return cloneProps;\n  }\n});\nRefSelect.displayName = \'Select\';\nvar RefTreeSelect = /*#__PURE__*/react["forwardRef"](function (props, ref) {\n  var multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? \'SHOW_CHILD\' : _props$showCheckedStr,\n      labelInValue = props.labelInValue,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? \'value\' : _props$treeNodeFilter,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      children = props.children,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeLine = props.treeLine,\n      treeMotion = props.treeMotion,\n      filterTreeNode = props.filterTreeNode,\n      dropdownPopupAlign = props.dropdownPopupAlign,\n      onChange = props.onChange,\n      onTreeExpand = props.onTreeExpand,\n      onTreeLoad = props.onTreeLoad,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedMultiple = multiple || mergedCheckable;\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue; // ========================== Ref ==========================\n\n  var selectRef = react["useRef"](null);\n  react["useImperativeHandle"](ref, function () {\n    return {\n      focus: selectRef.current.focus,\n      blur: selectRef.current.blur\n    };\n  }); // ======================= Tree Data =======================\n  // Legacy both support `label` or `title` if not set.\n  // We have to fallback to function to handle this\n\n  var getTreeNodeTitle = function getTreeNodeTitle(node) {\n    if (!treeData) {\n      return node.title;\n    }\n\n    return node.label || node.title;\n  };\n\n  var getTreeNodeLabelProp = function getTreeNodeLabelProp(node) {\n    if (treeNodeLabelProp) {\n      return node[treeNodeLabelProp];\n    }\n\n    return getTreeNodeTitle(node);\n  };\n\n  var mergedTreeData = useTreeData(treeData, children, {\n    getLabelProp: getTreeNodeTitle,\n    simpleMode: treeDataSimpleMode\n  });\n  var flattedOptions = Object(react["useMemo"])(function () {\n    return valueUtil_flattenOptions(mergedTreeData);\n  }, [mergedTreeData]);\n\n  var _useKeyValueMap = useKeyValueMap(flattedOptions),\n      _useKeyValueMap2 = Object(slicedToArray["a" /* default */])(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = Object(slicedToArray["a" /* default */])(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n  var _useMemo = Object(react["useMemo"])(function () {\n    if (treeConduction) {\n      return Object(treeUtil["a" /* convertDataToEntities */])(mergedTreeData);\n    }\n\n    return {\n      keyEntities: null\n    };\n  }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n      conductKeyEntities = _useMemo.keyEntities; // ========================= Value =========================\n\n\n  var _useMergedState = Object(useMergedState["a" /* default */])(props.defaultValue, {\n    value: props.value\n  }),\n      _useMergedState2 = Object(slicedToArray["a" /* default */])(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = function splitRawValues(newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (getEntityByValue(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  };\n\n  var _useMemo2 = Object(react["useMemo"])(function () {\n    var valueHalfCheckedKeys = [];\n    var newRawValues = [];\n    valueUtil_toArray(value).forEach(function (item) {\n      if (item && Object(esm_typeof["a" /* default */])(item) === \'object\' && \'value\' in item) {\n        if (item.halfChecked && treeCheckStrictly) {\n          var entity = getEntityByValue(item.value);\n          valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n        } else {\n          newRawValues.push(item.value);\n        }\n      } else {\n        newRawValues.push(item);\n      }\n    }); // We need do conduction of values\n\n    if (treeConduction) {\n      var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck = Object(conductUtil["a" /* conductCheck */])(keyList, true, conductKeyEntities),\n          checkedKeys = _conductCheck.checkedKeys,\n          halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n      return [[].concat(Object(toConsumableArray["a" /* default */])(missingRawValues), Object(toConsumableArray["a" /* default */])(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      }))), halfCheckedKeys];\n    }\n\n    return [newRawValues, valueHalfCheckedKeys];\n  }, [value, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n      _useMemo3 = Object(slicedToArray["a" /* default */])(_useMemo2, 2),\n      rawValues = _useMemo3[0],\n      rawHalfCheckedKeys = _useMemo3[1];\n\n  var selectValues = useSelectValues(rawValues, {\n    treeConduction: treeConduction,\n    value: value,\n    showCheckedStrategy: showCheckedStrategy,\n    conductKeyEntities: conductKeyEntities,\n    getEntityByValue: getEntityByValue,\n    getEntityByKey: getEntityByKey,\n    getLabelProp: getTreeNodeLabelProp\n  });\n\n  var triggerChange = function triggerChange(newRawValues, extra, source) {\n    setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction && showCheckedStrategy !== \'SHOW_ALL\') {\n        var keyList = newRawValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.key : val;\n        });\n        var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfCheckedKeys.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        }).filter(function (val) {\n          return !eventValues.includes(val);\n        });\n        returnValues = [].concat(Object(toConsumableArray["a" /* default */])(returnValues), Object(toConsumableArray["a" /* default */])(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n      }\n\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: selectValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === \'selection\' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? getTreeNodeLabelProp(entity.data) : null;\n      }), additionalInfo);\n    }\n  };\n\n  var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectValue], {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    } else {\n      var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues2 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues2.missingRawValues,\n            existRawValues = _splitRawValues2.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck2 = Object(conductUtil["a" /* conductCheck */])(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck2.checkedKeys;\n\n        newRawValues = [].concat(Object(toConsumableArray["a" /* default */])(missingRawValues), Object(toConsumableArray["a" /* default */])(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    }\n\n    if (onSelect) {\n      onSelect(eventValue, option);\n    }\n  };\n\n  var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n    var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n    if (treeConduction) {\n      var _splitRawValues3 = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues3.missingRawValues,\n          existRawValues = _splitRawValues3.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck3 = Object(conductUtil["a" /* conductCheck */])(keyList, {\n        checked: false,\n        halfCheckedKeys: rawHalfCheckedKeys\n      }, conductKeyEntities),\n          checkedKeys = _conductCheck3.checkedKeys;\n\n      newRawValues = [].concat(Object(toConsumableArray["a" /* default */])(missingRawValues), Object(toConsumableArray["a" /* default */])(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      })));\n    }\n\n    triggerChange(newRawValues, {\n      selected: false,\n      triggerValue: selectValue\n    }, source);\n\n    if (onDeselect) {\n      onDeselect(eventValue, option);\n    }\n  };\n\n  var onInternalClear = function onInternalClear() {\n    triggerChange([], null, \'clear\');\n  }; // ========================= Open ==========================\n\n\n  var onInternalDropdownVisibleChange = react["useCallback"](function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, \'documentClickClose\', {\n        get: function get() {\n          Object(warning["a" /* default */])(false, \'Second param of `onDropdownVisibleChange` has been removed.\');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n  if (false) {} // ======================== Render =========================\n  // We pass some props into select props style\n\n\n  var selectProps = {\n    optionLabelProp: null,\n    optionFilterProp: treeNodeFilterProp,\n    dropdownAlign: dropdownPopupAlign,\n    internalProps: {\n      mark: generator["a" /* INTERNAL_PROPS_MARK */],\n      onClear: onInternalClear,\n      skipTriggerChange: true,\n      skipTriggerSelect: true,\n      onRawSelect: onInternalSelect,\n      onRawDeselect: onInternalDeselect\n    }\n  };\n\n  if (\'filterTreeNode\' in props) {\n    selectProps.filterOption = filterTreeNode;\n  }\n\n  return /*#__PURE__*/react["createElement"](SelectContext.Provider, {\n    value: {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawValues,\n      halfCheckedKeys: rawHalfCheckedKeys,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp\n    }\n  }, /*#__PURE__*/react["createElement"](RefSelect, Object.assign({\n    ref: selectRef,\n    mode: mergedMultiple ? \'multiple\' : null\n  }, props, selectProps, {\n    value: selectValues,\n    // We will handle this ourself since we need calculate conduction\n    labelInValue: true,\n    options: mergedTreeData,\n    onChange: null,\n    onSelect: null,\n    onDeselect: null,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  })));\n}); // Use class component since typescript not support generic\n// by `forwardRef` with function component yet.\n\nvar TreeSelect_TreeSelect = /*#__PURE__*/function (_React$Component) {\n  Object(inherits["a" /* default */])(TreeSelect, _React$Component);\n\n  var _super = Object(createSuper["a" /* default */])(TreeSelect);\n\n  function TreeSelect() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TreeSelect);\n\n    _this = _super.apply(this, arguments);\n    _this.selectRef = /*#__PURE__*/react["createRef"]();\n\n    _this.focus = function () {\n      _this.selectRef.current.focus();\n    };\n\n    _this.blur = function () {\n      _this.selectRef.current.blur();\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(TreeSelect, [{\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react["createElement"](RefTreeSelect, Object.assign({\n        ref: this.selectRef\n      }, this.props));\n    }\n  }]);\n\n  return TreeSelect;\n}(react["Component"]);\n\nTreeSelect_TreeSelect.TreeNode = es_TreeNode;\nTreeSelect_TreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect_TreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect_TreeSelect.SHOW_CHILD = SHOW_CHILD;\n/* harmony default export */ var es_TreeSelect = (TreeSelect_TreeSelect);\n// CONCATENATED MODULE: ./node_modules/rc-tree-select/es/index.js\n\n\n\n\n/* harmony default export */ var rc_tree_select_es = (es_TreeSelect);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/omit.js\nvar omit = __webpack_require__("bT9E");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/_util/devWarning.js\nvar devWarning = __webpack_require__("uaoM");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/select/utils/iconUtil.js\nvar iconUtil = __webpack_require__("1vzs");\n\n// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/icons/LoadingOutlined.js + 1 modules\nvar LoadingOutlined = __webpack_require__("ye1Q");\n\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/FileOutlined.js\n// This icon file is generated automatically.\nvar FileOutlined_FileOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z" } }] }, "name": "file", "theme": "outlined" };\n/* harmony default export */ var asn_FileOutlined = (FileOutlined_FileOutlined);\n\n// EXTERNAL MODULE: ./node_modules/@ant-design/icons/es/components/AntdIcon.js + 3 modules\nvar AntdIcon = __webpack_require__("6VBw");\n\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/FileOutlined.js\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\n\n\nvar icons_FileOutlined_FileOutlined = function FileOutlined(props, ref) {\n  return /*#__PURE__*/react["createElement"](AntdIcon["a" /* default */], Object.assign({}, props, {\n    ref: ref,\n    icon: asn_FileOutlined\n  }));\n};\n\nicons_FileOutlined_FileOutlined.displayName = \'FileOutlined\';\n/* harmony default export */ var icons_FileOutlined = (/*#__PURE__*/react["forwardRef"](icons_FileOutlined_FileOutlined));\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/MinusSquareOutlined.js\n// This icon file is generated automatically.\nvar MinusSquareOutlined_MinusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "minus-square", "theme": "outlined" };\n/* harmony default export */ var asn_MinusSquareOutlined = (MinusSquareOutlined_MinusSquareOutlined);\n\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/MinusSquareOutlined.js\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\n\n\nvar icons_MinusSquareOutlined_MinusSquareOutlined = function MinusSquareOutlined(props, ref) {\n  return /*#__PURE__*/react["createElement"](AntdIcon["a" /* default */], Object.assign({}, props, {\n    ref: ref,\n    icon: asn_MinusSquareOutlined\n  }));\n};\n\nicons_MinusSquareOutlined_MinusSquareOutlined.displayName = \'MinusSquareOutlined\';\n/* harmony default export */ var icons_MinusSquareOutlined = (/*#__PURE__*/react["forwardRef"](icons_MinusSquareOutlined_MinusSquareOutlined));\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/PlusSquareOutlined.js\n// This icon file is generated automatically.\nvar PlusSquareOutlined_PlusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "plus-square", "theme": "outlined" };\n/* harmony default export */ var asn_PlusSquareOutlined = (PlusSquareOutlined_PlusSquareOutlined);\n\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\n\n\nvar icons_PlusSquareOutlined_PlusSquareOutlined = function PlusSquareOutlined(props, ref) {\n  return /*#__PURE__*/react["createElement"](AntdIcon["a" /* default */], Object.assign({}, props, {\n    ref: ref,\n    icon: asn_PlusSquareOutlined\n  }));\n};\n\nicons_PlusSquareOutlined_PlusSquareOutlined.displayName = \'PlusSquareOutlined\';\n/* harmony default export */ var icons_PlusSquareOutlined = (/*#__PURE__*/react["forwardRef"](icons_PlusSquareOutlined_PlusSquareOutlined));\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons-svg/es/asn/CaretDownFilled.js\n// This icon file is generated automatically.\nvar CaretDownFilled_CaretDownFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "filled" };\n/* harmony default export */ var asn_CaretDownFilled = (CaretDownFilled_CaretDownFilled);\n\n// CONCATENATED MODULE: ./node_modules/@ant-design/icons/es/icons/CaretDownFilled.js\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\n\n\nvar icons_CaretDownFilled_CaretDownFilled = function CaretDownFilled(props, ref) {\n  return /*#__PURE__*/react["createElement"](AntdIcon["a" /* default */], Object.assign({}, props, {\n    ref: ref,\n    icon: asn_CaretDownFilled\n  }));\n};\n\nicons_CaretDownFilled_CaretDownFilled.displayName = \'CaretDownFilled\';\n/* harmony default export */ var icons_CaretDownFilled = (/*#__PURE__*/react["forwardRef"](icons_CaretDownFilled_CaretDownFilled));\n// CONCATENATED MODULE: ./node_modules/antd/es/tree/utils/iconUtil.js\n\n\n\n\n\n\n\n\n\nfunction renderSwitcherIcon(prefixCls, switcherIcon, showLine, _ref) {\n  var isLeaf = _ref.isLeaf,\n      expanded = _ref.expanded,\n      loading = _ref.loading;\n\n  if (loading) {\n    return /*#__PURE__*/react["createElement"](LoadingOutlined["a" /* default */], {\n      className: "".concat(prefixCls, "-switcher-loading-icon")\n    });\n  }\n\n  var showLeafIcon;\n\n  if (showLine && Object(esm_typeof["a" /* default */])(showLine) === \'object\') {\n    showLeafIcon = showLine.showLeafIcon;\n  }\n\n  if (isLeaf) {\n    if (showLine) {\n      if (Object(esm_typeof["a" /* default */])(showLine) === \'object\' && !showLeafIcon) {\n        return /*#__PURE__*/react["createElement"]("span", {\n          className: "".concat(prefixCls, "-switcher-leaf-line")\n        });\n      }\n\n      return /*#__PURE__*/react["createElement"](icons_FileOutlined, {\n        className: "".concat(prefixCls, "-switcher-line-icon")\n      });\n    }\n\n    return null;\n  }\n\n  var switcherCls = "".concat(prefixCls, "-switcher-icon");\n\n  if (Object(reactNode["b" /* isValidElement */])(switcherIcon)) {\n    return Object(reactNode["a" /* cloneElement */])(switcherIcon, {\n      className: classnames_default()(switcherIcon.props.className || \'\', switcherCls)\n    });\n  }\n\n  if (switcherIcon) {\n    return switcherIcon;\n  }\n\n  if (showLine) {\n    return expanded ? /*#__PURE__*/react["createElement"](icons_MinusSquareOutlined, {\n      className: "".concat(prefixCls, "-switcher-line-icon")\n    }) : /*#__PURE__*/react["createElement"](icons_PlusSquareOutlined, {\n      className: "".concat(prefixCls, "-switcher-line-icon")\n    });\n  }\n\n  return /*#__PURE__*/react["createElement"](icons_CaretDownFilled, {\n    className: switcherCls\n  });\n}\n// EXTERNAL MODULE: ./node_modules/antd/es/config-provider/SizeContext.js\nvar SizeContext = __webpack_require__("3Nzz");\n\n// CONCATENATED MODULE: ./node_modules/antd/es/tree-select/index.js\n\n\n\nvar tree_select_rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar tree_select_InternalTreeSelect = function InternalTreeSelect(_a, ref) {\n  var _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeSize = _a.size,\n      _a$bordered = _a.bordered,\n      bordered = _a$bordered === void 0 ? true : _a$bordered,\n      className = _a.className,\n      treeCheckable = _a.treeCheckable,\n      multiple = _a.multiple,\n      _a$listHeight = _a.listHeight,\n      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,\n      _a$listItemHeight = _a.listItemHeight,\n      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,\n      notFoundContent = _a.notFoundContent,\n      _switcherIcon = _a.switcherIcon,\n      treeLine = _a.treeLine,\n      getPopupContainer = _a.getPopupContainer,\n      dropdownClassName = _a.dropdownClassName,\n      _a$treeIcon = _a.treeIcon,\n      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,\n      _a$transitionName = _a.transitionName,\n      transitionName = _a$transitionName === void 0 ? \'slide-up\' : _a$transitionName,\n      _a$choiceTransitionNa = _a.choiceTransitionName,\n      choiceTransitionName = _a$choiceTransitionNa === void 0 ? \'\' : _a$choiceTransitionNa,\n      props = tree_select_rest(_a, ["prefixCls", "size", "bordered", "className", "treeCheckable", "multiple", "listHeight", "listItemHeight", "notFoundContent", "switcherIcon", "treeLine", "getPopupContainer", "dropdownClassName", "treeIcon", "transitionName", "choiceTransitionName"]);\n\n  var _React$useContext = react["useContext"](context["b" /* ConfigContext */]),\n      getContextPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction,\n      virtual = _React$useContext.virtual,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;\n\n  var size = react["useContext"](SizeContext["b" /* default */]);\n  Object(devWarning["a" /* default */])(multiple !== false || !treeCheckable, \'TreeSelect\', \'`multiple` will alway be `true` when `treeCheckable` is true\');\n  var prefixCls = getPrefixCls(\'select\', customizePrefixCls);\n  var treePrefixCls = getPrefixCls(\'select-tree\', customizePrefixCls);\n  var treeSelectPrefixCls = getPrefixCls(\'tree-select\', customizePrefixCls);\n  var mergedDropdownClassName = classnames_default()(dropdownClassName, "".concat(treeSelectPrefixCls, "-dropdown"), Object(defineProperty["a" /* default */])({}, "".concat(treeSelectPrefixCls, "-dropdown-rtl"), direction === \'rtl\'));\n  var isMultiple = !!(treeCheckable || multiple); // ===================== Icons =====================\n\n  var _getIcons = Object(iconUtil["a" /* default */])(Object(esm_extends["a" /* default */])(Object(esm_extends["a" /* default */])({}, props), {\n    multiple: isMultiple,\n    prefixCls: prefixCls\n  })),\n      suffixIcon = _getIcons.suffixIcon,\n      removeIcon = _getIcons.removeIcon,\n      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================\n\n\n  var mergedNotFound;\n\n  if (notFoundContent !== undefined) {\n    mergedNotFound = notFoundContent;\n  } else {\n    mergedNotFound = renderEmpty(\'Select\');\n  } // ==================== Render =====================\n\n\n  var selectProps = Object(omit["a" /* default */])(props, [\'suffixIcon\', \'itemIcon\', \'removeIcon\', \'clearIcon\', \'switcherIcon\']);\n  var mergedSize = customizeSize || size;\n  var mergedClassName = classnames_default()(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, Object(defineProperty["a" /* default */])(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === \'large\'), Object(defineProperty["a" /* default */])(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === \'small\'), Object(defineProperty["a" /* default */])(_classNames2, "".concat(prefixCls, "-rtl"), direction === \'rtl\'), Object(defineProperty["a" /* default */])(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _classNames2), className);\n  return /*#__PURE__*/react["createElement"](rc_tree_select_es, Object(esm_extends["a" /* default */])({\n    virtual: virtual,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }, selectProps, {\n    ref: ref,\n    prefixCls: prefixCls,\n    className: mergedClassName,\n    listHeight: listHeight,\n    listItemHeight: listItemHeight,\n    treeCheckable: treeCheckable ? /*#__PURE__*/react["createElement"]("span", {\n      className: "".concat(prefixCls, "-tree-checkbox-inner")\n    }) : treeCheckable,\n    inputIcon: suffixIcon,\n    multiple: multiple,\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);\n    },\n    showTreeIcon: treeIcon,\n    notFoundContent: mergedNotFound,\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    treeMotion: null,\n    dropdownClassName: mergedDropdownClassName,\n    choiceTransitionName: choiceTransitionName,\n    transitionName: transitionName\n  }));\n};\n\nvar TreeSelectRef = /*#__PURE__*/react["forwardRef"](tree_select_InternalTreeSelect);\nvar tree_select_TreeSelect = TreeSelectRef;\ntree_select_TreeSelect.TreeNode = es_TreeNode;\ntree_select_TreeSelect.SHOW_ALL = SHOW_ALL;\ntree_select_TreeSelect.SHOW_PARENT = SHOW_PARENT;\ntree_select_TreeSelect.SHOW_CHILD = SHOW_CHILD;\n\n/* harmony default export */ var tree_select = (tree_select_TreeSelect);\n// EXTERNAL MODULE: ./node_modules/@umijs/babel-preset-umi/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules\nvar esm_objectWithoutProperties = __webpack_require__("PpiC");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/form/style/index.js\nvar form_style = __webpack_require__("y8nQ");\n\n// EXTERNAL MODULE: ./node_modules/antd/es/form/index.js + 12 modules\nvar es_form = __webpack_require__("Vl3Y");\n\n// EXTERNAL MODULE: ./src/utils/index.ts\nvar utils = __webpack_require__("0lfv");\n\n// CONCATENATED MODULE: ./src/pages/role/components/Modal.tsx\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * @Author: tkiddo\r\n * @Date: 2021-02-03 09:35:15\r\n * @LastEditors: tkiddo\r\n * @LastEditTime: 2021-02-03 10:41:09\r\n * @Description:\r\n */\n\n\n\nvar FormItem = es_form["a" /* default */].Item;\nvar formItemLayout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\n\nvar genTreeData = tree => {\n  return tree.map(node => {\n    return {\n      title: node.zh,\n      value: node.id,\n      children: node.children ? genTreeData(node.children) : []\n    };\n  });\n};\n\nvar RoleModal = (_ref) => {\n  var _ref$item = _ref.item,\n      item = _ref$item === void 0 ? {} : _ref$item,\n      onOk = _ref.onOk,\n      modalProps = Object(esm_objectWithoutProperties["a" /* default */])(_ref, ["item", "onOk"]);\n\n  var formRef = Object(react["useRef"])(null);\n  var routeList = store_legacy_default.a.get(\'routeList\');\n\n  var handleOk = () => {\n    formRef.current.validateFields().then(values => {\n      onOk(values);\n    }).catch(errorInfo => {\n      console.log(errorInfo);\n    });\n  };\n\n  var onTreeSelectChange = value => {\n    console.log(value);\n  };\n\n  var tree = Object(utils["a" /* arrayToTree */])(routeList);\n  var treeSelectProps = {\n    treeCheckable: true,\n    showCheckedStrategy: tree_select.SHOW_ALL,\n    treeData: genTreeData(tree),\n    onChange: onTreeSelectChange\n  };\n  return /*#__PURE__*/react_default.a.createElement(modal["a" /* default */], Object(helpers_esm_extends["a" /* default */])({}, modalProps, {\n    onOk: handleOk\n  }), /*#__PURE__*/react_default.a.createElement(es_form["a" /* default */], {\n    initialValues: item,\n    ref: formRef\n  }, /*#__PURE__*/react_default.a.createElement(FormItem, Object(helpers_esm_extends["a" /* default */])({\n    name: "name",\n    label: "\\u89D2\\u8272\\u540D\\u79F0",\n    hasFeedback: true\n  }, formItemLayout, {\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/react_default.a.createElement(input["a" /* default */], null)), /*#__PURE__*/react_default.a.createElement(FormItem, Object(helpers_esm_extends["a" /* default */])({\n    name: "permission",\n    label: "\\u89D2\\u8272\\u6743\\u9650",\n    hasFeedback: true\n  }, formItemLayout, {\n    rules: [{\n      required: true\n    }]\n  }), /*#__PURE__*/react_default.a.createElement(tree_select, treeSelectProps))));\n};\n\n/* harmony default export */ var Modal = (RoleModal);\n// CONCATENATED MODULE: ./src/pages/role/index.tsx\n\n\n\n/*\r\n * @Author: tkiddo\r\n * @Date: 2021-02-02 14:38:01\r\n * @LastEditors: tkiddo\r\n * @LastEditTime: 2021-02-03 11:01:48\r\n * @Description:\r\n */\n\n\n\n\n\n\n\nvar Role = (_ref) => {\n  var _ref$role = _ref.role,\n      list = _ref$role.list,\n      currentItem = _ref$role.currentItem,\n      modalType = _ref$role.modalType,\n      modalVisible = _ref$role.modalVisible,\n      loading = _ref.loading,\n      dispatch = _ref.dispatch;\n\n  var handleAdd = () => {\n    dispatch({\n      type: \'role/showModal\',\n      payload: {\n        modalType: \'create\'\n      }\n    });\n  };\n\n  var listProps = {\n    loading: loading.effects[\'role/query\'],\n    data: list,\n    dist: store_legacy_default.a.get(\'routeList\'),\n    onDeleteItem: _id => {\n      dispatch({\n        type: \'role/delete\',\n        payload: {\n          _id\n        }\n      }).then(() => dispatch({\n        type: \'role/query\'\n      }));\n    },\n    onEditItem: item => {\n      dispatch({\n        type: \'role/showModal\',\n        payload: {\n          modalType: \'update\',\n          currentItem: item\n        }\n      });\n    }\n  };\n  var modalProps = {\n    item: modalType === \'create\' ? {} : currentItem,\n    title: modalType === \'create\' ? \'\u521b\u5efa\u89d2\u8272\' : \'\u7f16\u8f91\u89d2\u8272\',\n    visible: modalVisible,\n    width: 600,\n    centered: true,\n    onCancel: () => {\n      dispatch({\n        type: \'role/hideModal\'\n      });\n    },\n    onOk: value => {\n      dispatch({\n        type: "role/".concat(modalType),\n        payload: value\n      }).then(() => dispatch({\n        type: \'role/query\'\n      }));\n    }\n  };\n  return /*#__PURE__*/react_default.a.createElement(components["d" /* Page */], {\n    inner: true\n  }, /*#__PURE__*/react_default.a.createElement(es_button["a" /* default */], {\n    type: "primary",\n    size: "middle",\n    onClick: handleAdd\n  }, "\\u521B\\u5EFA"), /*#__PURE__*/react_default.a.createElement(components_List, listProps), /*#__PURE__*/react_default.a.createElement(Modal, modalProps));\n};\n\n/* harmony default export */ var role = __webpack_exports__["default"] = (Object(umiExports["a" /* connect */])((_ref2) => {\n  var role = _ref2.role,\n      loading = _ref2.loading;\n  return {\n    loading,\n    role\n  };\n})(Role));\n\n//# sourceURL=webpack:///./src/pages/role/index.tsx_+_35_modules?')}}]);